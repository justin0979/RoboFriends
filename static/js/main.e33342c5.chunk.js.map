{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.jsx","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","components/MainPage.js","containers/App.js","actions/index.js","constants.js","reducers/reducers.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","id","name","email","CardList","console","log","robots","map","robot","components_Card","key","SearchBox","aria-label","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","React","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","components_CounterButton","MainPage","filterRobots","filter","toLowerCase","includes","searchField","pendingStatus","isPending","components_ErrorBoundary","components_CardList","onRequestRobots","components_Header","components_SearchBox","handleChange","components_Scroll","App","src_components_MainPage","connect","searchRobots","requestRobots","dispatch","e","payload","target","value","_ref","asyncToGenerator","regenerator_default","mark","_callee","results","wrap","_context","prev","next","fetch","sent","json","t0","stop","_x","apply","arguments","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","rootReducer","combineReducers","length","undefined","action","assign","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e33342c5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = props => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"robots photos\" src={`https://robohash.org/${props.id}?size=200x200`} />\n      <div>\n        <h2>{props.name}</h2>\n        <p>{props.email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = props => {\n  console.log('CardList');\n  return (\n    <div>\n      {props.robots.map(robot => {\n        return (\n          <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = props => {\n  console.log('SearchBox');\n  return (\n    <div className=\"pa2\">\n      <input\n        aria-label=\"Search Robots\"\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={props.onChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = props => {\n  return (\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '80vh' }}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooooops. That is not good</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React from 'react';\n\nclass CounterButton extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true;\n    } else return false;\n  }\n\n  updateCount = () => {\n    this.setState(state => {\n      return { count: state.count + 1 };\n    });\n  };\n\n  render() {\n    return (\n      <button id=\"counter\" color={this.props.color} onClick={this.updateCount}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\n\nexport default CounterButton;\n","import React from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends React.Component {\n  /*\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n  */\n  render() {\n    console.log('Header');\n    return (\n      <div>\n        <h1 className=\"f1\">RoboFriends</h1>\n        <CounterButton color={'red'} />\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\nimport './MainPage.scss';\n\nclass MainPage extends React.Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  filterRobots = () => {\n    return this.props.robots.filter(robot =>\n      robot.name.toLowerCase().includes(this.props.searchField.toLowerCase())\n    );\n  };\n\n  pendingStatus = () => {\n    return this.props.isPending ? (\n      <h1>Loading</h1>\n    ) : (\n      <ErrorBoundary>\n        <CardList robots={this.filterRobots()} />\n      </ErrorBoundary>\n    );\n  };\n\n  render() {\n    if (this.props.isPending) return <h1>Loading</h1>;\n    return (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox onChange={this.props.handleChange} />\n        <Scroll>{this.pendingStatus()}</Scroll>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\nimport MainPage from '../components/MainPage';\nimport './App.scss';\n\nclass App extends React.Component {\n  render() {\n    return <MainPage {...this.props} />;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  handleChange: e => dispatch(setSearchField(e.target.value)),\n  onRequestRobots: () => dispatch(requestRobots())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from '../constants';\n\nexport const setSearchField = text => {\n  return {\n    type: CHANGE_SEARCHFIELD,\n    payload: text\n  };\n};\n\nexport const requestRobots = () => async dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  try {\n    const results = await fetch('https://jsonplaceholder.typicode.com/users');\n    const robots = await results.json();\n    dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: robots });\n  } catch (error) {\n    dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error });\n  }\n};\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import {\n  CHANGE_SEARCHFIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from '../constants';\n\nconst initialStateSearch = {\n  searchField: ''\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCHFIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: []\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\n//import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport { requestRobots, searchRobots } from './reducers/reducers';\nimport * as serviceWorker from './serviceWorker';\n\n//const logger = createLogger();\nconst rootReducer = combineReducers({ requestRobots, searchRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware /* logger */));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}